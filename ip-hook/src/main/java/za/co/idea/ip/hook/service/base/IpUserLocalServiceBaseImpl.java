package za.co.idea.ip.hook.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import za.co.idea.ip.hook.model.IpUser;
import za.co.idea.ip.hook.service.IpUserLocalService;
import za.co.idea.ip.hook.service.persistence.IpGroupPersistence;
import za.co.idea.ip.hook.service.persistence.IpLoginPersistence;
import za.co.idea.ip.hook.service.persistence.IpSecqListPersistence;
import za.co.idea.ip.hook.service.persistence.IpUserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the ip user local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link za.co.idea.ip.hook.service.impl.IpUserLocalServiceImpl}.
 * </p>
 *
 * @author VMPattamatta
 * @see za.co.idea.ip.hook.service.impl.IpUserLocalServiceImpl
 * @see za.co.idea.ip.hook.service.IpUserLocalServiceUtil
 * @generated
 */
public abstract class IpUserLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements IpUserLocalService, IdentifiableBean {
    @BeanReference(type = za.co.idea.ip.hook.service.IpGroupLocalService.class)
    protected za.co.idea.ip.hook.service.IpGroupLocalService ipGroupLocalService;
    @BeanReference(type = za.co.idea.ip.hook.service.IpGroupService.class)
    protected za.co.idea.ip.hook.service.IpGroupService ipGroupService;
    @BeanReference(type = IpGroupPersistence.class)
    protected IpGroupPersistence ipGroupPersistence;
    @BeanReference(type = za.co.idea.ip.hook.service.IpLoginLocalService.class)
    protected za.co.idea.ip.hook.service.IpLoginLocalService ipLoginLocalService;
    @BeanReference(type = za.co.idea.ip.hook.service.IpLoginService.class)
    protected za.co.idea.ip.hook.service.IpLoginService ipLoginService;
    @BeanReference(type = IpLoginPersistence.class)
    protected IpLoginPersistence ipLoginPersistence;
    @BeanReference(type = za.co.idea.ip.hook.service.IpSecqListLocalService.class)
    protected za.co.idea.ip.hook.service.IpSecqListLocalService ipSecqListLocalService;
    @BeanReference(type = za.co.idea.ip.hook.service.IpSecqListService.class)
    protected za.co.idea.ip.hook.service.IpSecqListService ipSecqListService;
    @BeanReference(type = IpSecqListPersistence.class)
    protected IpSecqListPersistence ipSecqListPersistence;
    @BeanReference(type = za.co.idea.ip.hook.service.IpUserLocalService.class)
    protected za.co.idea.ip.hook.service.IpUserLocalService ipUserLocalService;
    @BeanReference(type = za.co.idea.ip.hook.service.IpUserService.class)
    protected za.co.idea.ip.hook.service.IpUserService ipUserService;
    @BeanReference(type = IpUserPersistence.class)
    protected IpUserPersistence ipUserPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private IpUserLocalServiceClpInvoker _clpInvoker = new IpUserLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link za.co.idea.ip.hook.service.IpUserLocalServiceUtil} to access the ip user local service.
     */

    /**
     * Adds the ip user to the database. Also notifies the appropriate model listeners.
     *
     * @param ipUser the ip user
     * @return the ip user that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public IpUser addIpUser(IpUser ipUser) throws SystemException {
        ipUser.setNew(true);

        return ipUserPersistence.update(ipUser);
    }

    /**
     * Creates a new ip user with the primary key. Does not add the ip user to the database.
     *
     * @param userId the primary key for the new ip user
     * @return the new ip user
     */
    @Override
    public IpUser createIpUser(long userId) {
        return ipUserPersistence.create(userId);
    }

    /**
     * Deletes the ip user with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param userId the primary key of the ip user
     * @return the ip user that was removed
     * @throws PortalException if a ip user with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public IpUser deleteIpUser(long userId)
        throws PortalException, SystemException {
        return ipUserPersistence.remove(userId);
    }

    /**
     * Deletes the ip user from the database. Also notifies the appropriate model listeners.
     *
     * @param ipUser the ip user
     * @return the ip user that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public IpUser deleteIpUser(IpUser ipUser) throws SystemException {
        return ipUserPersistence.remove(ipUser);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(IpUser.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return ipUserPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link za.co.idea.ip.hook.model.impl.IpUserModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return ipUserPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link za.co.idea.ip.hook.model.impl.IpUserModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return ipUserPersistence.findWithDynamicQuery(dynamicQuery, start, end,
            orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return ipUserPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return ipUserPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public IpUser fetchIpUser(long userId) throws SystemException {
        return ipUserPersistence.fetchByPrimaryKey(userId);
    }

    /**
     * Returns the ip user with the primary key.
     *
     * @param userId the primary key of the ip user
     * @return the ip user
     * @throws PortalException if a ip user with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public IpUser getIpUser(long userId)
        throws PortalException, SystemException {
        return ipUserPersistence.findByPrimaryKey(userId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return ipUserPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the ip users.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link za.co.idea.ip.hook.model.impl.IpUserModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of ip users
     * @param end the upper bound of the range of ip users (not inclusive)
     * @return the range of ip users
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<IpUser> getIpUsers(int start, int end)
        throws SystemException {
        return ipUserPersistence.findAll(start, end);
    }

    /**
     * Returns the number of ip users.
     *
     * @return the number of ip users
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getIpUsersCount() throws SystemException {
        return ipUserPersistence.countAll();
    }

    /**
     * Updates the ip user in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param ipUser the ip user
     * @return the ip user that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public IpUser updateIpUser(IpUser ipUser) throws SystemException {
        return ipUserPersistence.update(ipUser);
    }

    /**
     * Returns the ip group local service.
     *
     * @return the ip group local service
     */
    public za.co.idea.ip.hook.service.IpGroupLocalService getIpGroupLocalService() {
        return ipGroupLocalService;
    }

    /**
     * Sets the ip group local service.
     *
     * @param ipGroupLocalService the ip group local service
     */
    public void setIpGroupLocalService(
        za.co.idea.ip.hook.service.IpGroupLocalService ipGroupLocalService) {
        this.ipGroupLocalService = ipGroupLocalService;
    }

    /**
     * Returns the ip group remote service.
     *
     * @return the ip group remote service
     */
    public za.co.idea.ip.hook.service.IpGroupService getIpGroupService() {
        return ipGroupService;
    }

    /**
     * Sets the ip group remote service.
     *
     * @param ipGroupService the ip group remote service
     */
    public void setIpGroupService(
        za.co.idea.ip.hook.service.IpGroupService ipGroupService) {
        this.ipGroupService = ipGroupService;
    }

    /**
     * Returns the ip group persistence.
     *
     * @return the ip group persistence
     */
    public IpGroupPersistence getIpGroupPersistence() {
        return ipGroupPersistence;
    }

    /**
     * Sets the ip group persistence.
     *
     * @param ipGroupPersistence the ip group persistence
     */
    public void setIpGroupPersistence(IpGroupPersistence ipGroupPersistence) {
        this.ipGroupPersistence = ipGroupPersistence;
    }

    /**
     * Returns the ip login local service.
     *
     * @return the ip login local service
     */
    public za.co.idea.ip.hook.service.IpLoginLocalService getIpLoginLocalService() {
        return ipLoginLocalService;
    }

    /**
     * Sets the ip login local service.
     *
     * @param ipLoginLocalService the ip login local service
     */
    public void setIpLoginLocalService(
        za.co.idea.ip.hook.service.IpLoginLocalService ipLoginLocalService) {
        this.ipLoginLocalService = ipLoginLocalService;
    }

    /**
     * Returns the ip login remote service.
     *
     * @return the ip login remote service
     */
    public za.co.idea.ip.hook.service.IpLoginService getIpLoginService() {
        return ipLoginService;
    }

    /**
     * Sets the ip login remote service.
     *
     * @param ipLoginService the ip login remote service
     */
    public void setIpLoginService(
        za.co.idea.ip.hook.service.IpLoginService ipLoginService) {
        this.ipLoginService = ipLoginService;
    }

    /**
     * Returns the ip login persistence.
     *
     * @return the ip login persistence
     */
    public IpLoginPersistence getIpLoginPersistence() {
        return ipLoginPersistence;
    }

    /**
     * Sets the ip login persistence.
     *
     * @param ipLoginPersistence the ip login persistence
     */
    public void setIpLoginPersistence(IpLoginPersistence ipLoginPersistence) {
        this.ipLoginPersistence = ipLoginPersistence;
    }

    /**
     * Returns the ip secq list local service.
     *
     * @return the ip secq list local service
     */
    public za.co.idea.ip.hook.service.IpSecqListLocalService getIpSecqListLocalService() {
        return ipSecqListLocalService;
    }

    /**
     * Sets the ip secq list local service.
     *
     * @param ipSecqListLocalService the ip secq list local service
     */
    public void setIpSecqListLocalService(
        za.co.idea.ip.hook.service.IpSecqListLocalService ipSecqListLocalService) {
        this.ipSecqListLocalService = ipSecqListLocalService;
    }

    /**
     * Returns the ip secq list remote service.
     *
     * @return the ip secq list remote service
     */
    public za.co.idea.ip.hook.service.IpSecqListService getIpSecqListService() {
        return ipSecqListService;
    }

    /**
     * Sets the ip secq list remote service.
     *
     * @param ipSecqListService the ip secq list remote service
     */
    public void setIpSecqListService(
        za.co.idea.ip.hook.service.IpSecqListService ipSecqListService) {
        this.ipSecqListService = ipSecqListService;
    }

    /**
     * Returns the ip secq list persistence.
     *
     * @return the ip secq list persistence
     */
    public IpSecqListPersistence getIpSecqListPersistence() {
        return ipSecqListPersistence;
    }

    /**
     * Sets the ip secq list persistence.
     *
     * @param ipSecqListPersistence the ip secq list persistence
     */
    public void setIpSecqListPersistence(
        IpSecqListPersistence ipSecqListPersistence) {
        this.ipSecqListPersistence = ipSecqListPersistence;
    }

    /**
     * Returns the ip user local service.
     *
     * @return the ip user local service
     */
    public za.co.idea.ip.hook.service.IpUserLocalService getIpUserLocalService() {
        return ipUserLocalService;
    }

    /**
     * Sets the ip user local service.
     *
     * @param ipUserLocalService the ip user local service
     */
    public void setIpUserLocalService(
        za.co.idea.ip.hook.service.IpUserLocalService ipUserLocalService) {
        this.ipUserLocalService = ipUserLocalService;
    }

    /**
     * Returns the ip user remote service.
     *
     * @return the ip user remote service
     */
    public za.co.idea.ip.hook.service.IpUserService getIpUserService() {
        return ipUserService;
    }

    /**
     * Sets the ip user remote service.
     *
     * @param ipUserService the ip user remote service
     */
    public void setIpUserService(
        za.co.idea.ip.hook.service.IpUserService ipUserService) {
        this.ipUserService = ipUserService;
    }

    /**
     * Returns the ip user persistence.
     *
     * @return the ip user persistence
     */
    public IpUserPersistence getIpUserPersistence() {
        return ipUserPersistence;
    }

    /**
     * Sets the ip user persistence.
     *
     * @param ipUserPersistence the ip user persistence
     */
    public void setIpUserPersistence(IpUserPersistence ipUserPersistence) {
        this.ipUserPersistence = ipUserPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("za.co.idea.ip.hook.model.IpUser",
            ipUserLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "za.co.idea.ip.hook.model.IpUser");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return IpUser.class;
    }

    protected String getModelClassName() {
        return IpUser.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = ipUserPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
