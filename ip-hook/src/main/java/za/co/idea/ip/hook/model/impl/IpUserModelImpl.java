package za.co.idea.ip.hook.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import za.co.idea.ip.hook.model.IpUser;
import za.co.idea.ip.hook.model.IpUserModel;
import za.co.idea.ip.hook.model.IpUserSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the IpUser service. Represents a row in the &quot;ip_user&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link za.co.idea.ip.hook.model.IpUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IpUserImpl}.
 * </p>
 *
 * @author VMPattamatta
 * @see IpUserImpl
 * @see za.co.idea.ip.hook.model.IpUser
 * @see za.co.idea.ip.hook.model.IpUserModel
 * @generated
 */
@JSON(strict = true)
public class IpUserModelImpl extends BaseModelImpl<IpUser>
    implements IpUserModel {
    /**
	 * 
	 */
	private static final long serialVersionUID = 3135635368385093264L;
	/*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ip user model instance should use the {@link za.co.idea.ip.hook.model.IpUser} interface instead.
     */
    public static final String TABLE_NAME = "ip_user";
    public static final Object[][] TABLE_COLUMNS = {
            { "user_id", Types.BIGINT },
            { "user_f_name", Types.VARCHAR },
            { "user_l_name", Types.VARCHAR },
            { "user_m_name", Types.VARCHAR },
            { "user_id_num", Types.BIGINT },
            { "user_screen_name", Types.VARCHAR },
            { "user_email", Types.VARCHAR },
            { "user_contact", Types.VARCHAR },
            { "user_skills", Types.VARCHAR },
            { "user_bio", Types.VARCHAR },
            { "user_fb_handle", Types.VARCHAR },
            { "user_tw_handle", Types.VARCHAR },
            { "user_status", Types.VARCHAR },
            { "user_employeeId", Types.VARCHAR },
            { "user_pri_grp_id", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table ip_user (user_id LONG not null primary key,user_f_name VARCHAR(75) null,user_l_name VARCHAR(75) null,user_m_name VARCHAR(75) null,user_id_num LONG,user_screen_name VARCHAR(75) null,user_email VARCHAR(75) null,user_contact VARCHAR(75) null,user_skills VARCHAR(75) null,user_bio VARCHAR(75) null,user_fb_handle VARCHAR(75) null,user_tw_handle VARCHAR(75) null,user_status VARCHAR(75) null,user_employeeId VARCHAR(75) null,user_pri_grp_id LONG)";
    public static final String TABLE_SQL_DROP = "drop table ip_user";
    public static final String ORDER_BY_JPQL = " ORDER BY ipUser.userScreenName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ip_user.user_screen_name ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.za.co.idea.ip.hook.model.IpUser"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.za.co.idea.ip.hook.model.IpUser"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.za.co.idea.ip.hook.model.IpUser"),
            true);
    public static long USERID_COLUMN_BITMASK = 1L;
    public static long USERSCREENNAME_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.za.co.idea.ip.hook.model.IpUser"));
    private static ClassLoader _classLoader = IpUser.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { IpUser.class };
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private String _userFName;
    private String _userLName;
    private String _userMName;
    private long _userIdNum;
    private String _userScreenName;
    private String _originalUserScreenName;
    private String _userEmail;
    private String _userContact;
    private String _userSkills;
    private String _userBio;
    private String _userFbHandle;
    private String _userTwHandle;
    private String _userStatus;
    private String _userEmployeeId;
    private long _priGrpId;
    private long _columnBitmask;
    private IpUser _escapedModel;

    public IpUserModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static IpUser toModel(IpUserSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        IpUser model = new IpUserImpl();

        model.setUserId(soapModel.getUserId());
        model.setUserFName(soapModel.getUserFName());
        model.setUserLName(soapModel.getUserLName());
        model.setUserMName(soapModel.getUserMName());
        model.setUserIdNum(soapModel.getUserIdNum());
        model.setUserScreenName(soapModel.getUserScreenName());
        model.setUserEmail(soapModel.getUserEmail());
        model.setUserContact(soapModel.getUserContact());
        model.setUserSkills(soapModel.getUserSkills());
        model.setUserBio(soapModel.getUserBio());
        model.setUserFbHandle(soapModel.getUserFbHandle());
        model.setUserTwHandle(soapModel.getUserTwHandle());
        model.setUserStatus(soapModel.getUserStatus());
        model.setUserEmployeeId(soapModel.getUserEmployeeId());
        model.setPriGrpId(soapModel.getPriGrpId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<IpUser> toModels(IpUserSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<IpUser> models = new ArrayList<IpUser>(soapModels.length);

        for (IpUserSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _userId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setUserId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _userId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return IpUser.class;
    }

    @Override
    public String getModelClassName() {
        return IpUser.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("userId", getUserId());
        attributes.put("userFName", getUserFName());
        attributes.put("userLName", getUserLName());
        attributes.put("userMName", getUserMName());
        attributes.put("userIdNum", getUserIdNum());
        attributes.put("userScreenName", getUserScreenName());
        attributes.put("userEmail", getUserEmail());
        attributes.put("userContact", getUserContact());
        attributes.put("userSkills", getUserSkills());
        attributes.put("userBio", getUserBio());
        attributes.put("userFbHandle", getUserFbHandle());
        attributes.put("userTwHandle", getUserTwHandle());
        attributes.put("userStatus", getUserStatus());
        attributes.put("userEmployeeId", getUserEmployeeId());
        attributes.put("priGrpId", getPriGrpId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userFName = (String) attributes.get("userFName");

        if (userFName != null) {
            setUserFName(userFName);
        }

        String userLName = (String) attributes.get("userLName");

        if (userLName != null) {
            setUserLName(userLName);
        }

        String userMName = (String) attributes.get("userMName");

        if (userMName != null) {
            setUserMName(userMName);
        }

        Long userIdNum = (Long) attributes.get("userIdNum");

        if (userIdNum != null) {
            setUserIdNum(userIdNum);
        }

        String userScreenName = (String) attributes.get("userScreenName");

        if (userScreenName != null) {
            setUserScreenName(userScreenName);
        }

        String userEmail = (String) attributes.get("userEmail");

        if (userEmail != null) {
            setUserEmail(userEmail);
        }

        String userContact = (String) attributes.get("userContact");

        if (userContact != null) {
            setUserContact(userContact);
        }

        String userSkills = (String) attributes.get("userSkills");

        if (userSkills != null) {
            setUserSkills(userSkills);
        }

        String userBio = (String) attributes.get("userBio");

        if (userBio != null) {
            setUserBio(userBio);
        }

        String userFbHandle = (String) attributes.get("userFbHandle");

        if (userFbHandle != null) {
            setUserFbHandle(userFbHandle);
        }

        String userTwHandle = (String) attributes.get("userTwHandle");

        if (userTwHandle != null) {
            setUserTwHandle(userTwHandle);
        }

        String userStatus = (String) attributes.get("userStatus");

        if (userStatus != null) {
            setUserStatus(userStatus);
        }

        String userEmployeeId = (String) attributes.get("userEmployeeId");

        if (userEmployeeId != null) {
            setUserEmployeeId(userEmployeeId);
        }

        Long priGrpId = (Long) attributes.get("priGrpId");

        if (priGrpId != null) {
            setPriGrpId(priGrpId);
        }
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    @Override
    public String getUserFName() {
        if (_userFName == null) {
            return StringPool.BLANK;
        } else {
            return _userFName;
        }
    }

    @Override
    public void setUserFName(String userFName) {
        _userFName = userFName;
    }

    @JSON
    @Override
    public String getUserLName() {
        if (_userLName == null) {
            return StringPool.BLANK;
        } else {
            return _userLName;
        }
    }

    @Override
    public void setUserLName(String userLName) {
        _userLName = userLName;
    }

    @JSON
    @Override
    public String getUserMName() {
        if (_userMName == null) {
            return StringPool.BLANK;
        } else {
            return _userMName;
        }
    }

    @Override
    public void setUserMName(String userMName) {
        _userMName = userMName;
    }

    @JSON
    @Override
    public long getUserIdNum() {
        return _userIdNum;
    }

    @Override
    public void setUserIdNum(long userIdNum) {
        _userIdNum = userIdNum;
    }

    @JSON
    @Override
    public String getUserScreenName() {
        if (_userScreenName == null) {
            return StringPool.BLANK;
        } else {
            return _userScreenName;
        }
    }

    @Override
    public void setUserScreenName(String userScreenName) {
        _columnBitmask = -1L;

        if (_originalUserScreenName == null) {
            _originalUserScreenName = _userScreenName;
        }

        _userScreenName = userScreenName;
    }

    public String getOriginalUserScreenName() {
        return GetterUtil.getString(_originalUserScreenName);
    }

    @JSON
    @Override
    public String getUserEmail() {
        if (_userEmail == null) {
            return StringPool.BLANK;
        } else {
            return _userEmail;
        }
    }

    @Override
    public void setUserEmail(String userEmail) {
        _userEmail = userEmail;
    }

    @JSON
    @Override
    public String getUserContact() {
        if (_userContact == null) {
            return StringPool.BLANK;
        } else {
            return _userContact;
        }
    }

    @Override
    public void setUserContact(String userContact) {
        _userContact = userContact;
    }

    @JSON
    @Override
    public String getUserSkills() {
        if (_userSkills == null) {
            return StringPool.BLANK;
        } else {
            return _userSkills;
        }
    }

    @Override
    public void setUserSkills(String userSkills) {
        _userSkills = userSkills;
    }

    @JSON
    @Override
    public String getUserBio() {
        if (_userBio == null) {
            return StringPool.BLANK;
        } else {
            return _userBio;
        }
    }

    @Override
    public void setUserBio(String userBio) {
        _userBio = userBio;
    }

    @JSON
    @Override
    public String getUserFbHandle() {
        if (_userFbHandle == null) {
            return StringPool.BLANK;
        } else {
            return _userFbHandle;
        }
    }

    @Override
    public void setUserFbHandle(String userFbHandle) {
        _userFbHandle = userFbHandle;
    }

    @JSON
    @Override
    public String getUserTwHandle() {
        if (_userTwHandle == null) {
            return StringPool.BLANK;
        } else {
            return _userTwHandle;
        }
    }

    @Override
    public void setUserTwHandle(String userTwHandle) {
        _userTwHandle = userTwHandle;
    }

    @JSON
    @Override
    public String getUserStatus() {
        if (_userStatus == null) {
            return StringPool.BLANK;
        } else {
            return _userStatus;
        }
    }

    @Override
    public void setUserStatus(String userStatus) {
        _userStatus = userStatus;
    }

    @JSON
    @Override
    public String getUserEmployeeId() {
        if (_userEmployeeId == null) {
            return StringPool.BLANK;
        } else {
            return _userEmployeeId;
        }
    }

    @Override
    public void setUserEmployeeId(String userEmployeeId) {
        _userEmployeeId = userEmployeeId;
    }

    @JSON
    @Override
    public long getPriGrpId() {
        return _priGrpId;
    }

    @Override
    public void setPriGrpId(long priGrpId) {
        _priGrpId = priGrpId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            IpUser.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public IpUser toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (IpUser) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        IpUserImpl ipUserImpl = new IpUserImpl();

        ipUserImpl.setUserId(getUserId());
        ipUserImpl.setUserFName(getUserFName());
        ipUserImpl.setUserLName(getUserLName());
        ipUserImpl.setUserMName(getUserMName());
        ipUserImpl.setUserIdNum(getUserIdNum());
        ipUserImpl.setUserScreenName(getUserScreenName());
        ipUserImpl.setUserEmail(getUserEmail());
        ipUserImpl.setUserContact(getUserContact());
        ipUserImpl.setUserSkills(getUserSkills());
        ipUserImpl.setUserBio(getUserBio());
        ipUserImpl.setUserFbHandle(getUserFbHandle());
        ipUserImpl.setUserTwHandle(getUserTwHandle());
        ipUserImpl.setUserStatus(getUserStatus());
        ipUserImpl.setUserEmployeeId(getUserEmployeeId());
        ipUserImpl.setPriGrpId(getPriGrpId());

        ipUserImpl.resetOriginalValues();

        return ipUserImpl;
    }

    @Override
    public int compareTo(IpUser ipUser) {
        int value = 0;

        value = getUserScreenName().compareTo(ipUser.getUserScreenName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof IpUser)) {
            return false;
        }

        IpUser ipUser = (IpUser) obj;

        long primaryKey = ipUser.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        IpUserModelImpl ipUserModelImpl = this;

        ipUserModelImpl._originalUserId = ipUserModelImpl._userId;

        ipUserModelImpl._setOriginalUserId = false;

        ipUserModelImpl._originalUserScreenName = ipUserModelImpl._userScreenName;

        ipUserModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<IpUser> toCacheModel() {
        IpUserCacheModel ipUserCacheModel = new IpUserCacheModel();

        ipUserCacheModel.userId = getUserId();

        ipUserCacheModel.userFName = getUserFName();

        String userFName = ipUserCacheModel.userFName;

        if ((userFName != null) && (userFName.length() == 0)) {
            ipUserCacheModel.userFName = null;
        }

        ipUserCacheModel.userLName = getUserLName();

        String userLName = ipUserCacheModel.userLName;

        if ((userLName != null) && (userLName.length() == 0)) {
            ipUserCacheModel.userLName = null;
        }

        ipUserCacheModel.userMName = getUserMName();

        String userMName = ipUserCacheModel.userMName;

        if ((userMName != null) && (userMName.length() == 0)) {
            ipUserCacheModel.userMName = null;
        }

        ipUserCacheModel.userIdNum = getUserIdNum();

        ipUserCacheModel.userScreenName = getUserScreenName();

        String userScreenName = ipUserCacheModel.userScreenName;

        if ((userScreenName != null) && (userScreenName.length() == 0)) {
            ipUserCacheModel.userScreenName = null;
        }

        ipUserCacheModel.userEmail = getUserEmail();

        String userEmail = ipUserCacheModel.userEmail;

        if ((userEmail != null) && (userEmail.length() == 0)) {
            ipUserCacheModel.userEmail = null;
        }

        ipUserCacheModel.userContact = getUserContact();

        String userContact = ipUserCacheModel.userContact;

        if ((userContact != null) && (userContact.length() == 0)) {
            ipUserCacheModel.userContact = null;
        }

        ipUserCacheModel.userSkills = getUserSkills();

        String userSkills = ipUserCacheModel.userSkills;

        if ((userSkills != null) && (userSkills.length() == 0)) {
            ipUserCacheModel.userSkills = null;
        }

        ipUserCacheModel.userBio = getUserBio();

        String userBio = ipUserCacheModel.userBio;

        if ((userBio != null) && (userBio.length() == 0)) {
            ipUserCacheModel.userBio = null;
        }

        ipUserCacheModel.userFbHandle = getUserFbHandle();

        String userFbHandle = ipUserCacheModel.userFbHandle;

        if ((userFbHandle != null) && (userFbHandle.length() == 0)) {
            ipUserCacheModel.userFbHandle = null;
        }

        ipUserCacheModel.userTwHandle = getUserTwHandle();

        String userTwHandle = ipUserCacheModel.userTwHandle;

        if ((userTwHandle != null) && (userTwHandle.length() == 0)) {
            ipUserCacheModel.userTwHandle = null;
        }

        ipUserCacheModel.userStatus = getUserStatus();

        String userStatus = ipUserCacheModel.userStatus;

        if ((userStatus != null) && (userStatus.length() == 0)) {
            ipUserCacheModel.userStatus = null;
        }

        ipUserCacheModel.userEmployeeId = getUserEmployeeId();

        String userEmployeeId = ipUserCacheModel.userEmployeeId;

        if ((userEmployeeId != null) && (userEmployeeId.length() == 0)) {
            ipUserCacheModel.userEmployeeId = null;
        }

        ipUserCacheModel.priGrpId = getPriGrpId();

        return ipUserCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(31);

        sb.append("{userId=");
        sb.append(getUserId());
        sb.append(", userFName=");
        sb.append(getUserFName());
        sb.append(", userLName=");
        sb.append(getUserLName());
        sb.append(", userMName=");
        sb.append(getUserMName());
        sb.append(", userIdNum=");
        sb.append(getUserIdNum());
        sb.append(", userScreenName=");
        sb.append(getUserScreenName());
        sb.append(", userEmail=");
        sb.append(getUserEmail());
        sb.append(", userContact=");
        sb.append(getUserContact());
        sb.append(", userSkills=");
        sb.append(getUserSkills());
        sb.append(", userBio=");
        sb.append(getUserBio());
        sb.append(", userFbHandle=");
        sb.append(getUserFbHandle());
        sb.append(", userTwHandle=");
        sb.append(getUserTwHandle());
        sb.append(", userStatus=");
        sb.append(getUserStatus());
        sb.append(", userEmployeeId=");
        sb.append(getUserEmployeeId());
        sb.append(", priGrpId=");
        sb.append(getPriGrpId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(49);

        sb.append("<model><model-name>");
        sb.append("za.co.idea.ip.hook.model.IpUser");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userFName</column-name><column-value><![CDATA[");
        sb.append(getUserFName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userLName</column-name><column-value><![CDATA[");
        sb.append(getUserLName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userMName</column-name><column-value><![CDATA[");
        sb.append(getUserMName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userIdNum</column-name><column-value><![CDATA[");
        sb.append(getUserIdNum());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userScreenName</column-name><column-value><![CDATA[");
        sb.append(getUserScreenName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userEmail</column-name><column-value><![CDATA[");
        sb.append(getUserEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userContact</column-name><column-value><![CDATA[");
        sb.append(getUserContact());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userSkills</column-name><column-value><![CDATA[");
        sb.append(getUserSkills());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userBio</column-name><column-value><![CDATA[");
        sb.append(getUserBio());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userFbHandle</column-name><column-value><![CDATA[");
        sb.append(getUserFbHandle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userTwHandle</column-name><column-value><![CDATA[");
        sb.append(getUserTwHandle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userStatus</column-name><column-value><![CDATA[");
        sb.append(getUserStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userEmployeeId</column-name><column-value><![CDATA[");
        sb.append(getUserEmployeeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>priGrpId</column-name><column-value><![CDATA[");
        sb.append(getPriGrpId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
