package za.co.idea.ip.hook.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import za.co.idea.ip.hook.model.IpLogin;
import za.co.idea.ip.hook.model.IpLoginModel;
import za.co.idea.ip.hook.model.IpLoginSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the IpLogin service. Represents a row in the &quot;ip_login&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link za.co.idea.ip.hook.model.IpLoginModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IpLoginImpl}.
 * </p>
 *
 * @author VMPattamatta
 * @see IpLoginImpl
 * @see za.co.idea.ip.hook.model.IpLogin
 * @see za.co.idea.ip.hook.model.IpLoginModel
 * @generated
 */
@JSON(strict = true)
public class IpLoginModelImpl extends BaseModelImpl<IpLogin>
    implements IpLoginModel {
    /**
	 * 
	 */
	private static final long serialVersionUID = 3996213119198094079L;
	/*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ip login model instance should use the {@link za.co.idea.ip.hook.model.IpLogin} interface instead.
     */
    public static final String TABLE_NAME = "ip_login";
    public static final Object[][] TABLE_COLUMNS = {
            { "login_id", Types.BIGINT },
            { "login_user_id", Types.BIGINT },
            { "login_name", Types.VARCHAR },
            { "login_pwd", Types.VARCHAR },
            { "login_last_dt", Types.TIMESTAMP },
            { "login_sec_q", Types.INTEGER },
            { "login_sec_a", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table ip_login (login_id LONG not null primary key,login_user_id LONG,login_name VARCHAR(75) null,login_pwd VARCHAR(75) null,login_last_dt DATE null,login_sec_q INTEGER,login_sec_a VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table ip_login";
    public static final String ORDER_BY_JPQL = " ORDER BY ipLogin.loginId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ip_login.login_id ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.za.co.idea.ip.hook.model.IpLogin"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.za.co.idea.ip.hook.model.IpLogin"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.za.co.idea.ip.hook.model.IpLogin"),
            true);
    public static long LOGINID_COLUMN_BITMASK = 1L;
    public static long LOGINNAME_COLUMN_BITMASK = 2L;
    public static long LOGINPWD_COLUMN_BITMASK = 4L;
    public static long LOGINSECA_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.za.co.idea.ip.hook.model.IpLogin"));
    private static ClassLoader _classLoader = IpLogin.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            IpLogin.class
        };
    private long _loginId;
    private long _originalLoginId;
    private boolean _setOriginalLoginId;
    private long _loginUserId;
    private String _loginUserUuid;
    private String _loginName;
    private String _originalLoginName;
    private String _loginPwd;
    private String _originalLoginPwd;
    private Date _loginLastDt;
    private int _loginSecQ;
    private String _loginSecA;
    private String _originalLoginSecA;
    private long _columnBitmask;
    private IpLogin _escapedModel;

    public IpLoginModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static IpLogin toModel(IpLoginSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        IpLogin model = new IpLoginImpl();

        model.setLoginId(soapModel.getLoginId());
        model.setLoginUserId(soapModel.getLoginUserId());
        model.setLoginName(soapModel.getLoginName());
        model.setLoginPwd(soapModel.getLoginPwd());
        model.setLoginLastDt(soapModel.getLoginLastDt());
        model.setLoginSecQ(soapModel.getLoginSecQ());
        model.setLoginSecA(soapModel.getLoginSecA());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<IpLogin> toModels(IpLoginSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<IpLogin> models = new ArrayList<IpLogin>(soapModels.length);

        for (IpLoginSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _loginId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setLoginId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _loginId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return IpLogin.class;
    }

    @Override
    public String getModelClassName() {
        return IpLogin.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("loginId", getLoginId());
        attributes.put("loginUserId", getLoginUserId());
        attributes.put("loginName", getLoginName());
        attributes.put("loginPwd", getLoginPwd());
        attributes.put("loginLastDt", getLoginLastDt());
        attributes.put("loginSecQ", getLoginSecQ());
        attributes.put("loginSecA", getLoginSecA());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long loginId = (Long) attributes.get("loginId");

        if (loginId != null) {
            setLoginId(loginId);
        }

        Long loginUserId = (Long) attributes.get("loginUserId");

        if (loginUserId != null) {
            setLoginUserId(loginUserId);
        }

        String loginName = (String) attributes.get("loginName");

        if (loginName != null) {
            setLoginName(loginName);
        }

        String loginPwd = (String) attributes.get("loginPwd");

        if (loginPwd != null) {
            setLoginPwd(loginPwd);
        }

        Date loginLastDt = (Date) attributes.get("loginLastDt");

        if (loginLastDt != null) {
            setLoginLastDt(loginLastDt);
        }

        Integer loginSecQ = (Integer) attributes.get("loginSecQ");

        if (loginSecQ != null) {
            setLoginSecQ(loginSecQ);
        }

        String loginSecA = (String) attributes.get("loginSecA");

        if (loginSecA != null) {
            setLoginSecA(loginSecA);
        }
    }

    @JSON
    @Override
    public long getLoginId() {
        return _loginId;
    }

    @Override
    public void setLoginId(long loginId) {
        _columnBitmask = -1L;

        if (!_setOriginalLoginId) {
            _setOriginalLoginId = true;

            _originalLoginId = _loginId;
        }

        _loginId = loginId;
    }

    public long getOriginalLoginId() {
        return _originalLoginId;
    }

    @JSON
    @Override
    public long getLoginUserId() {
        return _loginUserId;
    }

    @Override
    public void setLoginUserId(long loginUserId) {
        _loginUserId = loginUserId;
    }

    @Override
    public String getLoginUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getLoginUserId(), "uuid", _loginUserUuid);
    }

    @Override
    public void setLoginUserUuid(String loginUserUuid) {
        _loginUserUuid = loginUserUuid;
    }

    @JSON
    @Override
    public String getLoginName() {
        if (_loginName == null) {
            return StringPool.BLANK;
        } else {
            return _loginName;
        }
    }

    @Override
    public void setLoginName(String loginName) {
        _columnBitmask |= LOGINNAME_COLUMN_BITMASK;

        if (_originalLoginName == null) {
            _originalLoginName = _loginName;
        }

        _loginName = loginName;
    }

    public String getOriginalLoginName() {
        return GetterUtil.getString(_originalLoginName);
    }

    @JSON
    @Override
    public String getLoginPwd() {
        if (_loginPwd == null) {
            return StringPool.BLANK;
        } else {
            return _loginPwd;
        }
    }

    @Override
    public void setLoginPwd(String loginPwd) {
        _columnBitmask |= LOGINPWD_COLUMN_BITMASK;

        if (_originalLoginPwd == null) {
            _originalLoginPwd = _loginPwd;
        }

        _loginPwd = loginPwd;
    }

    public String getOriginalLoginPwd() {
        return GetterUtil.getString(_originalLoginPwd);
    }

    @JSON
    @Override
    public Date getLoginLastDt() {
        return _loginLastDt;
    }

    @Override
    public void setLoginLastDt(Date loginLastDt) {
        _loginLastDt = loginLastDt;
    }

    @JSON
    @Override
    public int getLoginSecQ() {
        return _loginSecQ;
    }

    @Override
    public void setLoginSecQ(int loginSecQ) {
        _loginSecQ = loginSecQ;
    }

    @JSON
    @Override
    public String getLoginSecA() {
        if (_loginSecA == null) {
            return StringPool.BLANK;
        } else {
            return _loginSecA;
        }
    }

    @Override
    public void setLoginSecA(String loginSecA) {
        _columnBitmask |= LOGINSECA_COLUMN_BITMASK;

        if (_originalLoginSecA == null) {
            _originalLoginSecA = _loginSecA;
        }

        _loginSecA = loginSecA;
    }

    public String getOriginalLoginSecA() {
        return GetterUtil.getString(_originalLoginSecA);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            IpLogin.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public IpLogin toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (IpLogin) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        IpLoginImpl ipLoginImpl = new IpLoginImpl();

        ipLoginImpl.setLoginId(getLoginId());
        ipLoginImpl.setLoginUserId(getLoginUserId());
        ipLoginImpl.setLoginName(getLoginName());
        ipLoginImpl.setLoginPwd(getLoginPwd());
        ipLoginImpl.setLoginLastDt(getLoginLastDt());
        ipLoginImpl.setLoginSecQ(getLoginSecQ());
        ipLoginImpl.setLoginSecA(getLoginSecA());

        ipLoginImpl.resetOriginalValues();

        return ipLoginImpl;
    }

    @Override
    public int compareTo(IpLogin ipLogin) {
        int value = 0;

        if (getLoginId() < ipLogin.getLoginId()) {
            value = -1;
        } else if (getLoginId() > ipLogin.getLoginId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof IpLogin)) {
            return false;
        }

        IpLogin ipLogin = (IpLogin) obj;

        long primaryKey = ipLogin.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        IpLoginModelImpl ipLoginModelImpl = this;

        ipLoginModelImpl._originalLoginId = ipLoginModelImpl._loginId;

        ipLoginModelImpl._setOriginalLoginId = false;

        ipLoginModelImpl._originalLoginName = ipLoginModelImpl._loginName;

        ipLoginModelImpl._originalLoginPwd = ipLoginModelImpl._loginPwd;

        ipLoginModelImpl._originalLoginSecA = ipLoginModelImpl._loginSecA;

        ipLoginModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<IpLogin> toCacheModel() {
        IpLoginCacheModel ipLoginCacheModel = new IpLoginCacheModel();

        ipLoginCacheModel.loginId = getLoginId();

        ipLoginCacheModel.loginUserId = getLoginUserId();

        ipLoginCacheModel.loginName = getLoginName();

        String loginName = ipLoginCacheModel.loginName;

        if ((loginName != null) && (loginName.length() == 0)) {
            ipLoginCacheModel.loginName = null;
        }

        ipLoginCacheModel.loginPwd = getLoginPwd();

        String loginPwd = ipLoginCacheModel.loginPwd;

        if ((loginPwd != null) && (loginPwd.length() == 0)) {
            ipLoginCacheModel.loginPwd = null;
        }

        Date loginLastDt = getLoginLastDt();

        if (loginLastDt != null) {
            ipLoginCacheModel.loginLastDt = loginLastDt.getTime();
        } else {
            ipLoginCacheModel.loginLastDt = Long.MIN_VALUE;
        }

        ipLoginCacheModel.loginSecQ = getLoginSecQ();

        ipLoginCacheModel.loginSecA = getLoginSecA();

        String loginSecA = ipLoginCacheModel.loginSecA;

        if ((loginSecA != null) && (loginSecA.length() == 0)) {
            ipLoginCacheModel.loginSecA = null;
        }

        return ipLoginCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{loginId=");
        sb.append(getLoginId());
        sb.append(", loginUserId=");
        sb.append(getLoginUserId());
        sb.append(", loginName=");
        sb.append(getLoginName());
        sb.append(", loginPwd=");
        sb.append(getLoginPwd());
        sb.append(", loginLastDt=");
        sb.append(getLoginLastDt());
        sb.append(", loginSecQ=");
        sb.append(getLoginSecQ());
        sb.append(", loginSecA=");
        sb.append(getLoginSecA());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("za.co.idea.ip.hook.model.IpLogin");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>loginId</column-name><column-value><![CDATA[");
        sb.append(getLoginId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>loginUserId</column-name><column-value><![CDATA[");
        sb.append(getLoginUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>loginName</column-name><column-value><![CDATA[");
        sb.append(getLoginName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>loginPwd</column-name><column-value><![CDATA[");
        sb.append(getLoginPwd());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>loginLastDt</column-name><column-value><![CDATA[");
        sb.append(getLoginLastDt());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>loginSecQ</column-name><column-value><![CDATA[");
        sb.append(getLoginSecQ());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>loginSecA</column-name><column-value><![CDATA[");
        sb.append(getLoginSecA());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
