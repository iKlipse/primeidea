package za.co.idea.ip.hook.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import za.co.idea.ip.hook.model.IpSecqList;
import za.co.idea.ip.hook.model.IpSecqListModel;
import za.co.idea.ip.hook.model.IpSecqListSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the IpSecqList service. Represents a row in the &quot;ip_secq_list&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link za.co.idea.ip.hook.model.IpSecqListModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IpSecqListImpl}.
 * </p>
 *
 * @author VMPattamatta
 * @see IpSecqListImpl
 * @see za.co.idea.ip.hook.model.IpSecqList
 * @see za.co.idea.ip.hook.model.IpSecqListModel
 * @generated
 */
@JSON(strict = true)
public class IpSecqListModelImpl extends BaseModelImpl<IpSecqList>
    implements IpSecqListModel {
    /**
	 * 
	 */
	private static final long serialVersionUID = -6958621850528034411L;
	/*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ip secq list model instance should use the {@link za.co.idea.ip.hook.model.IpSecqList} interface instead.
     */
    public static final String TABLE_NAME = "ip_secq_list";
    public static final Object[][] TABLE_COLUMNS = {
            { "isl_id", Types.BIGINT },
            { "isl_desc", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table ip_secq_list (isl_id LONG not null primary key,isl_desc VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table ip_secq_list";
    public static final String ORDER_BY_JPQL = " ORDER BY ipSecqList.islId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ip_secq_list.isl_id ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.za.co.idea.ip.hook.model.IpSecqList"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.za.co.idea.ip.hook.model.IpSecqList"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.za.co.idea.ip.hook.model.IpSecqList"),
            true);
    public static long ISLID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.za.co.idea.ip.hook.model.IpSecqList"));
    private static ClassLoader _classLoader = IpSecqList.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            IpSecqList.class
        };
    private long _islId;
    private long _originalIslId;
    private boolean _setOriginalIslId;
    private String _islDesc;
    private long _columnBitmask;
    private IpSecqList _escapedModel;

    public IpSecqListModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static IpSecqList toModel(IpSecqListSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        IpSecqList model = new IpSecqListImpl();

        model.setIslId(soapModel.getIslId());
        model.setIslDesc(soapModel.getIslDesc());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<IpSecqList> toModels(IpSecqListSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<IpSecqList> models = new ArrayList<IpSecqList>(soapModels.length);

        for (IpSecqListSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _islId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setIslId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _islId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return IpSecqList.class;
    }

    @Override
    public String getModelClassName() {
        return IpSecqList.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("islId", getIslId());
        attributes.put("islDesc", getIslDesc());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long islId = (Long) attributes.get("islId");

        if (islId != null) {
            setIslId(islId);
        }

        String islDesc = (String) attributes.get("islDesc");

        if (islDesc != null) {
            setIslDesc(islDesc);
        }
    }

    @JSON
    @Override
    public long getIslId() {
        return _islId;
    }

    @Override
    public void setIslId(long islId) {
        _columnBitmask = -1L;

        if (!_setOriginalIslId) {
            _setOriginalIslId = true;

            _originalIslId = _islId;
        }

        _islId = islId;
    }

    public long getOriginalIslId() {
        return _originalIslId;
    }

    @JSON
    @Override
    public String getIslDesc() {
        if (_islDesc == null) {
            return StringPool.BLANK;
        } else {
            return _islDesc;
        }
    }

    @Override
    public void setIslDesc(String islDesc) {
        _islDesc = islDesc;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            IpSecqList.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public IpSecqList toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (IpSecqList) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        IpSecqListImpl ipSecqListImpl = new IpSecqListImpl();

        ipSecqListImpl.setIslId(getIslId());
        ipSecqListImpl.setIslDesc(getIslDesc());

        ipSecqListImpl.resetOriginalValues();

        return ipSecqListImpl;
    }

    @Override
    public int compareTo(IpSecqList ipSecqList) {
        int value = 0;

        if (getIslId() < ipSecqList.getIslId()) {
            value = -1;
        } else if (getIslId() > ipSecqList.getIslId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof IpSecqList)) {
            return false;
        }

        IpSecqList ipSecqList = (IpSecqList) obj;

        long primaryKey = ipSecqList.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        IpSecqListModelImpl ipSecqListModelImpl = this;

        ipSecqListModelImpl._originalIslId = ipSecqListModelImpl._islId;

        ipSecqListModelImpl._setOriginalIslId = false;

        ipSecqListModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<IpSecqList> toCacheModel() {
        IpSecqListCacheModel ipSecqListCacheModel = new IpSecqListCacheModel();

        ipSecqListCacheModel.islId = getIslId();

        ipSecqListCacheModel.islDesc = getIslDesc();

        String islDesc = ipSecqListCacheModel.islDesc;

        if ((islDesc != null) && (islDesc.length() == 0)) {
            ipSecqListCacheModel.islDesc = null;
        }

        return ipSecqListCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{islId=");
        sb.append(getIslId());
        sb.append(", islDesc=");
        sb.append(getIslDesc());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("za.co.idea.ip.hook.model.IpSecqList");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>islId</column-name><column-value><![CDATA[");
        sb.append(getIslId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>islDesc</column-name><column-value><![CDATA[");
        sb.append(getIslDesc());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
