package za.co.idea.ip.hook.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import za.co.idea.ip.hook.model.IpGroup;
import za.co.idea.ip.hook.model.IpGroupModel;
import za.co.idea.ip.hook.model.IpGroupSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the IpGroup service. Represents a row in the &quot;ip_group&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link za.co.idea.ip.hook.model.IpGroupModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IpGroupImpl}.
 * </p>
 *
 * @author VMPattamatta
 * @see IpGroupImpl
 * @see za.co.idea.ip.hook.model.IpGroup
 * @see za.co.idea.ip.hook.model.IpGroupModel
 * @generated
 */
@JSON(strict = true)
public class IpGroupModelImpl extends BaseModelImpl<IpGroup>
    implements IpGroupModel {
    /**
	 * 
	 */
	private static final long serialVersionUID = -4272304618696388029L;
	/*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ip group model instance should use the {@link za.co.idea.ip.hook.model.IpGroup} interface instead.
     */
    public static final String TABLE_NAME = "ip_group";
    public static final Object[][] TABLE_COLUMNS = {
            { "group_id", Types.BIGINT },
            { "group_admin_id", Types.BIGINT },
            { "group_parent_id", Types.BIGINT },
            { "group_name", Types.VARCHAR },
            { "group_status", Types.VARCHAR },
            { "group_email", Types.VARCHAR },
            { "group_is_core", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table ip_group (group_id LONG not null primary key,group_admin_id LONG,group_parent_id LONG,group_name VARCHAR(75) null,group_status VARCHAR(75) null,group_email VARCHAR(75) null,group_is_core VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table ip_group";
    public static final String ORDER_BY_JPQL = " ORDER BY ipGroup.groupName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ip_group.group_name ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.za.co.idea.ip.hook.model.IpGroup"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.za.co.idea.ip.hook.model.IpGroup"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.za.co.idea.ip.hook.model.IpGroup"),
            true);
    public static long GROUPID_COLUMN_BITMASK = 1L;
    public static long GROUPNAME_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.za.co.idea.ip.hook.model.IpGroup"));
    private static ClassLoader _classLoader = IpGroup.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            IpGroup.class
        };
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _groupAdminId;
    private long _groupParentId;
    private String _groupName;
    private String _groupStatus;
    private String _groupEmail;
    private String _groupIsCore;
    private long _columnBitmask;
    private IpGroup _escapedModel;

    public IpGroupModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static IpGroup toModel(IpGroupSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        IpGroup model = new IpGroupImpl();

        model.setGroupId(soapModel.getGroupId());
        model.setGroupAdminId(soapModel.getGroupAdminId());
        model.setGroupParentId(soapModel.getGroupParentId());
        model.setGroupName(soapModel.getGroupName());
        model.setGroupStatus(soapModel.getGroupStatus());
        model.setGroupEmail(soapModel.getGroupEmail());
        model.setGroupIsCore(soapModel.getGroupIsCore());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<IpGroup> toModels(IpGroupSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<IpGroup> models = new ArrayList<IpGroup>(soapModels.length);

        for (IpGroupSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _groupId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setGroupId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _groupId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return IpGroup.class;
    }

    @Override
    public String getModelClassName() {
        return IpGroup.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("groupId", getGroupId());
        attributes.put("groupAdminId", getGroupAdminId());
        attributes.put("groupParentId", getGroupParentId());
        attributes.put("groupName", getGroupName());
        attributes.put("groupStatus", getGroupStatus());
        attributes.put("groupEmail", getGroupEmail());
        attributes.put("groupIsCore", getGroupIsCore());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long groupAdminId = (Long) attributes.get("groupAdminId");

        if (groupAdminId != null) {
            setGroupAdminId(groupAdminId);
        }

        Long groupParentId = (Long) attributes.get("groupParentId");

        if (groupParentId != null) {
            setGroupParentId(groupParentId);
        }

        String groupName = (String) attributes.get("groupName");

        if (groupName != null) {
            setGroupName(groupName);
        }

        String groupStatus = (String) attributes.get("groupStatus");

        if (groupStatus != null) {
            setGroupStatus(groupStatus);
        }

        String groupEmail = (String) attributes.get("groupEmail");

        if (groupEmail != null) {
            setGroupEmail(groupEmail);
        }

        String groupIsCore = (String) attributes.get("groupIsCore");

        if (groupIsCore != null) {
            setGroupIsCore(groupIsCore);
        }
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getGroupAdminId() {
        return _groupAdminId;
    }

    @Override
    public void setGroupAdminId(long groupAdminId) {
        _groupAdminId = groupAdminId;
    }

    @JSON
    @Override
    public long getGroupParentId() {
        return _groupParentId;
    }

    @Override
    public void setGroupParentId(long groupParentId) {
        _groupParentId = groupParentId;
    }

    @JSON
    @Override
    public String getGroupName() {
        if (_groupName == null) {
            return StringPool.BLANK;
        } else {
            return _groupName;
        }
    }

    @Override
    public void setGroupName(String groupName) {
        _columnBitmask = -1L;

        _groupName = groupName;
    }

    @JSON
    @Override
    public String getGroupStatus() {
        if (_groupStatus == null) {
            return StringPool.BLANK;
        } else {
            return _groupStatus;
        }
    }

    @Override
    public void setGroupStatus(String groupStatus) {
        _groupStatus = groupStatus;
    }

    @JSON
    @Override
    public String getGroupEmail() {
        if (_groupEmail == null) {
            return StringPool.BLANK;
        } else {
            return _groupEmail;
        }
    }

    @Override
    public void setGroupEmail(String groupEmail) {
        _groupEmail = groupEmail;
    }

    @JSON
    @Override
    public String getGroupIsCore() {
        if (_groupIsCore == null) {
            return StringPool.BLANK;
        } else {
            return _groupIsCore;
        }
    }

    @Override
    public void setGroupIsCore(String groupIsCore) {
        _groupIsCore = groupIsCore;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            IpGroup.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public IpGroup toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (IpGroup) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        IpGroupImpl ipGroupImpl = new IpGroupImpl();

        ipGroupImpl.setGroupId(getGroupId());
        ipGroupImpl.setGroupAdminId(getGroupAdminId());
        ipGroupImpl.setGroupParentId(getGroupParentId());
        ipGroupImpl.setGroupName(getGroupName());
        ipGroupImpl.setGroupStatus(getGroupStatus());
        ipGroupImpl.setGroupEmail(getGroupEmail());
        ipGroupImpl.setGroupIsCore(getGroupIsCore());

        ipGroupImpl.resetOriginalValues();

        return ipGroupImpl;
    }

    @Override
    public int compareTo(IpGroup ipGroup) {
        int value = 0;

        value = getGroupName().compareTo(ipGroup.getGroupName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof IpGroup)) {
            return false;
        }

        IpGroup ipGroup = (IpGroup) obj;

        long primaryKey = ipGroup.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        IpGroupModelImpl ipGroupModelImpl = this;

        ipGroupModelImpl._originalGroupId = ipGroupModelImpl._groupId;

        ipGroupModelImpl._setOriginalGroupId = false;

        ipGroupModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<IpGroup> toCacheModel() {
        IpGroupCacheModel ipGroupCacheModel = new IpGroupCacheModel();

        ipGroupCacheModel.groupId = getGroupId();

        ipGroupCacheModel.groupAdminId = getGroupAdminId();

        ipGroupCacheModel.groupParentId = getGroupParentId();

        ipGroupCacheModel.groupName = getGroupName();

        String groupName = ipGroupCacheModel.groupName;

        if ((groupName != null) && (groupName.length() == 0)) {
            ipGroupCacheModel.groupName = null;
        }

        ipGroupCacheModel.groupStatus = getGroupStatus();

        String groupStatus = ipGroupCacheModel.groupStatus;

        if ((groupStatus != null) && (groupStatus.length() == 0)) {
            ipGroupCacheModel.groupStatus = null;
        }

        ipGroupCacheModel.groupEmail = getGroupEmail();

        String groupEmail = ipGroupCacheModel.groupEmail;

        if ((groupEmail != null) && (groupEmail.length() == 0)) {
            ipGroupCacheModel.groupEmail = null;
        }

        ipGroupCacheModel.groupIsCore = getGroupIsCore();

        String groupIsCore = ipGroupCacheModel.groupIsCore;

        if ((groupIsCore != null) && (groupIsCore.length() == 0)) {
            ipGroupCacheModel.groupIsCore = null;
        }

        return ipGroupCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{groupId=");
        sb.append(getGroupId());
        sb.append(", groupAdminId=");
        sb.append(getGroupAdminId());
        sb.append(", groupParentId=");
        sb.append(getGroupParentId());
        sb.append(", groupName=");
        sb.append(getGroupName());
        sb.append(", groupStatus=");
        sb.append(getGroupStatus());
        sb.append(", groupEmail=");
        sb.append(getGroupEmail());
        sb.append(", groupIsCore=");
        sb.append(getGroupIsCore());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("za.co.idea.ip.hook.model.IpGroup");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupAdminId</column-name><column-value><![CDATA[");
        sb.append(getGroupAdminId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupParentId</column-name><column-value><![CDATA[");
        sb.append(getGroupParentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupName</column-name><column-value><![CDATA[");
        sb.append(getGroupName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupStatus</column-name><column-value><![CDATA[");
        sb.append(getGroupStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupEmail</column-name><column-value><![CDATA[");
        sb.append(getGroupEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupIsCore</column-name><column-value><![CDATA[");
        sb.append(getGroupIsCore());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
