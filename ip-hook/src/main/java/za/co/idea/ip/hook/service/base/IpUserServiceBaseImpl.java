package za.co.idea.ip.hook.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import za.co.idea.ip.hook.model.IpUser;
import za.co.idea.ip.hook.service.IpUserService;
import za.co.idea.ip.hook.service.persistence.IpGroupPersistence;
import za.co.idea.ip.hook.service.persistence.IpLoginPersistence;
import za.co.idea.ip.hook.service.persistence.IpSecqListPersistence;
import za.co.idea.ip.hook.service.persistence.IpUserPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the ip user remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link za.co.idea.ip.hook.service.impl.IpUserServiceImpl}.
 * </p>
 *
 * @author VMPattamatta
 * @see za.co.idea.ip.hook.service.impl.IpUserServiceImpl
 * @see za.co.idea.ip.hook.service.IpUserServiceUtil
 * @generated
 */
public abstract class IpUserServiceBaseImpl extends BaseServiceImpl
    implements IpUserService, IdentifiableBean {
    @BeanReference(type = za.co.idea.ip.hook.service.IpGroupLocalService.class)
    protected za.co.idea.ip.hook.service.IpGroupLocalService ipGroupLocalService;
    @BeanReference(type = za.co.idea.ip.hook.service.IpGroupService.class)
    protected za.co.idea.ip.hook.service.IpGroupService ipGroupService;
    @BeanReference(type = IpGroupPersistence.class)
    protected IpGroupPersistence ipGroupPersistence;
    @BeanReference(type = za.co.idea.ip.hook.service.IpLoginLocalService.class)
    protected za.co.idea.ip.hook.service.IpLoginLocalService ipLoginLocalService;
    @BeanReference(type = za.co.idea.ip.hook.service.IpLoginService.class)
    protected za.co.idea.ip.hook.service.IpLoginService ipLoginService;
    @BeanReference(type = IpLoginPersistence.class)
    protected IpLoginPersistence ipLoginPersistence;
    @BeanReference(type = za.co.idea.ip.hook.service.IpSecqListLocalService.class)
    protected za.co.idea.ip.hook.service.IpSecqListLocalService ipSecqListLocalService;
    @BeanReference(type = za.co.idea.ip.hook.service.IpSecqListService.class)
    protected za.co.idea.ip.hook.service.IpSecqListService ipSecqListService;
    @BeanReference(type = IpSecqListPersistence.class)
    protected IpSecqListPersistence ipSecqListPersistence;
    @BeanReference(type = za.co.idea.ip.hook.service.IpUserLocalService.class)
    protected za.co.idea.ip.hook.service.IpUserLocalService ipUserLocalService;
    @BeanReference(type = za.co.idea.ip.hook.service.IpUserService.class)
    protected za.co.idea.ip.hook.service.IpUserService ipUserService;
    @BeanReference(type = IpUserPersistence.class)
    protected IpUserPersistence ipUserPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private IpUserServiceClpInvoker _clpInvoker = new IpUserServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link za.co.idea.ip.hook.service.IpUserServiceUtil} to access the ip user remote service.
     */

    /**
     * Returns the ip group local service.
     *
     * @return the ip group local service
     */
    public za.co.idea.ip.hook.service.IpGroupLocalService getIpGroupLocalService() {
        return ipGroupLocalService;
    }

    /**
     * Sets the ip group local service.
     *
     * @param ipGroupLocalService the ip group local service
     */
    public void setIpGroupLocalService(
        za.co.idea.ip.hook.service.IpGroupLocalService ipGroupLocalService) {
        this.ipGroupLocalService = ipGroupLocalService;
    }

    /**
     * Returns the ip group remote service.
     *
     * @return the ip group remote service
     */
    public za.co.idea.ip.hook.service.IpGroupService getIpGroupService() {
        return ipGroupService;
    }

    /**
     * Sets the ip group remote service.
     *
     * @param ipGroupService the ip group remote service
     */
    public void setIpGroupService(
        za.co.idea.ip.hook.service.IpGroupService ipGroupService) {
        this.ipGroupService = ipGroupService;
    }

    /**
     * Returns the ip group persistence.
     *
     * @return the ip group persistence
     */
    public IpGroupPersistence getIpGroupPersistence() {
        return ipGroupPersistence;
    }

    /**
     * Sets the ip group persistence.
     *
     * @param ipGroupPersistence the ip group persistence
     */
    public void setIpGroupPersistence(IpGroupPersistence ipGroupPersistence) {
        this.ipGroupPersistence = ipGroupPersistence;
    }

    /**
     * Returns the ip login local service.
     *
     * @return the ip login local service
     */
    public za.co.idea.ip.hook.service.IpLoginLocalService getIpLoginLocalService() {
        return ipLoginLocalService;
    }

    /**
     * Sets the ip login local service.
     *
     * @param ipLoginLocalService the ip login local service
     */
    public void setIpLoginLocalService(
        za.co.idea.ip.hook.service.IpLoginLocalService ipLoginLocalService) {
        this.ipLoginLocalService = ipLoginLocalService;
    }

    /**
     * Returns the ip login remote service.
     *
     * @return the ip login remote service
     */
    public za.co.idea.ip.hook.service.IpLoginService getIpLoginService() {
        return ipLoginService;
    }

    /**
     * Sets the ip login remote service.
     *
     * @param ipLoginService the ip login remote service
     */
    public void setIpLoginService(
        za.co.idea.ip.hook.service.IpLoginService ipLoginService) {
        this.ipLoginService = ipLoginService;
    }

    /**
     * Returns the ip login persistence.
     *
     * @return the ip login persistence
     */
    public IpLoginPersistence getIpLoginPersistence() {
        return ipLoginPersistence;
    }

    /**
     * Sets the ip login persistence.
     *
     * @param ipLoginPersistence the ip login persistence
     */
    public void setIpLoginPersistence(IpLoginPersistence ipLoginPersistence) {
        this.ipLoginPersistence = ipLoginPersistence;
    }

    /**
     * Returns the ip secq list local service.
     *
     * @return the ip secq list local service
     */
    public za.co.idea.ip.hook.service.IpSecqListLocalService getIpSecqListLocalService() {
        return ipSecqListLocalService;
    }

    /**
     * Sets the ip secq list local service.
     *
     * @param ipSecqListLocalService the ip secq list local service
     */
    public void setIpSecqListLocalService(
        za.co.idea.ip.hook.service.IpSecqListLocalService ipSecqListLocalService) {
        this.ipSecqListLocalService = ipSecqListLocalService;
    }

    /**
     * Returns the ip secq list remote service.
     *
     * @return the ip secq list remote service
     */
    public za.co.idea.ip.hook.service.IpSecqListService getIpSecqListService() {
        return ipSecqListService;
    }

    /**
     * Sets the ip secq list remote service.
     *
     * @param ipSecqListService the ip secq list remote service
     */
    public void setIpSecqListService(
        za.co.idea.ip.hook.service.IpSecqListService ipSecqListService) {
        this.ipSecqListService = ipSecqListService;
    }

    /**
     * Returns the ip secq list persistence.
     *
     * @return the ip secq list persistence
     */
    public IpSecqListPersistence getIpSecqListPersistence() {
        return ipSecqListPersistence;
    }

    /**
     * Sets the ip secq list persistence.
     *
     * @param ipSecqListPersistence the ip secq list persistence
     */
    public void setIpSecqListPersistence(
        IpSecqListPersistence ipSecqListPersistence) {
        this.ipSecqListPersistence = ipSecqListPersistence;
    }

    /**
     * Returns the ip user local service.
     *
     * @return the ip user local service
     */
    public za.co.idea.ip.hook.service.IpUserLocalService getIpUserLocalService() {
        return ipUserLocalService;
    }

    /**
     * Sets the ip user local service.
     *
     * @param ipUserLocalService the ip user local service
     */
    public void setIpUserLocalService(
        za.co.idea.ip.hook.service.IpUserLocalService ipUserLocalService) {
        this.ipUserLocalService = ipUserLocalService;
    }

    /**
     * Returns the ip user remote service.
     *
     * @return the ip user remote service
     */
    public za.co.idea.ip.hook.service.IpUserService getIpUserService() {
        return ipUserService;
    }

    /**
     * Sets the ip user remote service.
     *
     * @param ipUserService the ip user remote service
     */
    public void setIpUserService(
        za.co.idea.ip.hook.service.IpUserService ipUserService) {
        this.ipUserService = ipUserService;
    }

    /**
     * Returns the ip user persistence.
     *
     * @return the ip user persistence
     */
    public IpUserPersistence getIpUserPersistence() {
        return ipUserPersistence;
    }

    /**
     * Sets the ip user persistence.
     *
     * @param ipUserPersistence the ip user persistence
     */
    public void setIpUserPersistence(IpUserPersistence ipUserPersistence) {
        this.ipUserPersistence = ipUserPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();
    }

    public void destroy() {
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return IpUser.class;
    }

    protected String getModelClassName() {
        return IpUser.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = ipUserPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
